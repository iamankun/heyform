// Generated by An Kun
import { createDatabaseConnection } from '../database/neon-config'

export interface DatabaseEnvironment {
  database_url: string
  database_url_unpooled: string
  postgres_url: string
  postgres_url_non_pooling: string
  postgres_prisma_url: string
  pg_host: string
  pg_host_unpooled: string
  pg_user: string
  pg_database: string
  pg_password: string
  database_pool_max: number
  database_pool_idle_timeout: number
  database_connection_timeout: number
  node_env: string
}

export const getDatabaseConfig = (): DatabaseEnvironment => {
  return {
    database_url: process.env.DATABASE_URL || '',
    database_url_unpooled: process.env.DATABASE_URL_UNPOOLED || '',
    postgres_url: process.env.POSTGRES_URL || '',
    postgres_url_non_pooling: process.env.POSTGRES_URL_NON_POOLING || '',
    postgres_prisma_url: process.env.POSTGRES_PRISMA_URL || '',
    pg_host: process.env.PGHOST || '',
    pg_host_unpooled: process.env.PGHOST_UNPOOLED || '',
    pg_user: process.env.PGUSER || '',
    pg_database: process.env.PGDATABASE || '',
    pg_password: process.env.PGPASSWORD || '',
    database_pool_max: parseInt(process.env.DATABASE_POOL_MAX || '20'),
    database_pool_idle_timeout: parseInt(process.env.DATABASE_POOL_IDLE_TIMEOUT || '30000'),
    database_connection_timeout: parseInt(process.env.DATABASE_CONNECTION_TIMEOUT || '15'),
    node_env: process.env.NODE_ENV || 'development'
  }
}

export const initializeDatabase = (use_pooled: boolean = true) => {
  const config = getDatabaseConfig()
  
  // Choose connection string based on pooling preference
  const connection_string = use_pooled 
    ? (config.database_url || config.postgres_url)
    : (config.database_url_unpooled || config.postgres_url_non_pooling)
  
  if (!connection_string) {
    throw new Error('Database connection string is required. Please set DATABASE_URL or POSTGRES_URL environment variable')
  }

  return createDatabaseConnection({
    connection_string,
    pool_max_size: config.database_pool_max,
    pool_idle_timeout: config.database_pool_idle_timeout
  })
}

export const initializePrismaDatabase = () => {
  const config = getDatabaseConfig()
  
  if (!config.postgres_prisma_url) {
    throw new Error('POSTGRES_PRISMA_URL environment variable is required for Prisma connections')
  }

  return createDatabaseConnection({
    connection_string: config.postgres_prisma_url,
    pool_max_size: config.database_pool_max,
    pool_idle_timeout: config.database_pool_idle_timeout
  })
}

// Global database instances
let pooled_database_instance: ReturnType<typeof createDatabaseConnection> | null = null
let unpooled_database_instance: ReturnType<typeof createDatabaseConnection> | null = null

export const getDatabase = (use_pooled: boolean = true) => {
  if (use_pooled) {
    if (!pooled_database_instance) {
      pooled_database_instance = initializeDatabase(true)
    }
    return pooled_database_instance
  } else {
    if (!unpooled_database_instance) {
      unpooled_database_instance = initializeDatabase(false)
    }
    return unpooled_database_instance
  }
}

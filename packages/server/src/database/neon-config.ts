// Generated by An Kun
import { Pool } from '@neondatabase/serverless'
import { drizzle } from 'drizzle-orm/neon-serverless'

interface DatabaseConfig {
  connection_string: string
  pool_max_size: number
  pool_idle_timeout: number
}

export class NeonDatabaseManager {
  private pool: Pool
  private db: any

  constructor(config: DatabaseConfig) {
    this.pool = new Pool({
      connectionString: config.connection_string,
      max: config.pool_max_size,
      idleTimeoutMillis: config.pool_idle_timeout
    })
    
    this.db = drizzle(this.pool)
  }

  getDatabase() {
    return this.db
  }

  getPool() {
    return this.pool
  }

  async closeConnection() {
    await this.pool.end()
  }

  async testConnection(): Promise<boolean> {
    try {
      const client = await this.pool.connect()
      await client.query('SELECT 1')
      client.release()
      return true
    } catch (error) {
      console.error('Database connection test failed:', error)
      return false
    }
  }
}

export const createDatabaseConnection = (config: DatabaseConfig) => {
  return new NeonDatabaseManager(config)
}

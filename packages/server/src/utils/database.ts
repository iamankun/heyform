// Generated by An Kun
import { neon } from "@neondatabase/serverless";

// Validate required environment variables
if (!process.env.DATABASE_URL && !process.env.POSTGRES_URL) {
  throw new Error('DATABASE_URL or POSTGRES_URL environment variable is required');
}

// Primary pooled connection for most operations
export const sql = neon(process.env.DATABASE_URL || process.env.POSTGRES_URL!);

// Direct connection without pgbouncer for specific use cases
export const sql_unpooled = neon(
  process.env.DATABASE_URL_UNPOOLED || 
  process.env.POSTGRES_URL_NON_POOLING || 
  process.env.DATABASE_URL || 
  process.env.POSTGRES_URL!
);

export async function testDatabaseConnection(use_pooled: boolean = true): Promise<boolean> {
  try {
    const connection = use_pooled ? sql : sql_unpooled;
    const result = await connection`SELECT 1 as test`;
    return result.length > 0;
  } catch (error) {
    console.error(`Database connection test failed (pooled: ${use_pooled}):`, error);
    return false;
  }
}

export async function getDatabaseInfo(use_pooled: boolean = true) {
  try {
    const connection = use_pooled ? sql : sql_unpooled;
    const result = await connection`
      SELECT 
        current_database() as database_name,
        current_user as user_name,
        version() as postgres_version,
        inet_server_addr() as server_ip,
        inet_server_port() as server_port
    `;
    return result[0];
  } catch (error) {
    console.error('Failed to get database info:', error);
    return null;
  }
}

export async function getConnectionStatus() {
  const pooled_status = await testDatabaseConnection(true);
  const unpooled_status = await testDatabaseConnection(false);
  
  return {
    pooled_connection: pooled_status,
    unpooled_connection: unpooled_status,
    timestamp: new Date().toISOString()
  };
}

export async function getTableStats() {
  try {
    const result = await sql`
      SELECT 
        schemaname,
        tablename,
        n_tup_ins as inserts,
        n_tup_upd as updates,
        n_tup_del as deletes,
        n_live_tup as live_tuples,
        n_dead_tup as dead_tuples
      FROM pg_stat_user_tables
      ORDER BY tablename
    `;
    return result;
  } catch (error) {
    console.error('Failed to get table stats:', error);
    return [];
  }
}

// Generated by An Kun

import { neon, neonConfig } from '@neondatabase/serverless'

// Configure Neon for Vercel Edge Runtime
neonConfig.fetchConnectionCache = true

interface NeonConnection {
  pooled: ReturnType<typeof neon>
  unpooled: ReturnType<typeof neon>
}

class NeonVercelManager {
  private connections: NeonConnection | null = null

  constructor() {
    this.initializeConnections()
  }

  private initializeConnections() {
    const database_url = process.env.DATABASE_URL
    const database_url_unpooled = process.env.DATABASE_URL_UNPOOLED

    if (!database_url) {
      throw new Error('DATABASE_URL environment variable is required')
    }

    this.connections = {
      pooled: neon(database_url),
      unpooled: neon(database_url_unpooled || database_url)
    }
  }

  getPooledConnection() {
    if (!this.connections) {
      throw new Error('Database connections not initialized')
    }
    return this.connections.pooled
  }

  getUnpooledConnection() {
    if (!this.connections) {
      throw new Error('Database connections not initialized')
    }
    return this.connections.unpooled
  }

  async testConnections() {
    const pooled = this.getPooledConnection()
    const unpooled = this.getUnpooledConnection()

    try {
      const [pooled_result, unpooled_result] = await Promise.all([
        pooled`SELECT 'pooled' as connection_type, current_database()`,
        unpooled`SELECT 'unpooled' as connection_type, current_database()`
      ])

      return {
        pooled_status: 'connected',
        unpooled_status: 'connected',
        database_name: pooled_result[0]?.current_database,
        timestamp: new Date().toISOString()
      }
    } catch (error) {
      console.error('Neon connection test failed:', error)
      throw error
    }
  }

  async getConnectionInfo() {
    const sql = this.getPooledConnection()
    
    try {
      const result = await sql`
        SELECT 
          current_database() as database_name,
          current_user as user_name,
          version() as postgres_version,
          current_setting('server_version') as server_version
      `
      
      return result[0]
    } catch (error) {
      console.error('Failed to get connection info:', error)
      return null
    }
  }
}

// Export singleton instance
export const neonManager = new NeonVercelManager()

// Export convenience functions
export const sql = neonManager.getPooledConnection()
export const sql_unpooled = neonManager.getUnpooledConnection()

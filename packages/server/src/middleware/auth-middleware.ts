// Generated by An Kun

import { Request, Response, NextFunction } from 'express';
import { validateStackToken } from '../lib/stack-auth';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    display_name: string;
    is_email_verified: boolean;
  };
}

export async function authenticateUser(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) {
  try {
    const auth_header = req.headers.authorization;
    
    if (!auth_header || !auth_header.startsWith('Bearer ')) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: 'Missing or invalid authorization header',
        timestamp: new Date().toISOString()
      });
    }

    const token = auth_header.substring(7); // Remove 'Bearer ' prefix
    const validation_result = await validateStackToken(token);

    if (!validation_result.success || !validation_result.user) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: 'Invalid or expired token',
        timestamp: new Date().toISOString()
      });
    }

    req.user = validation_result.user;
    res.setHeader('X-User-ID', validation_result.user.id);
    res.setHeader('X-Auth-Provider', 'Stack-Auth');
    
    next();
  } catch (error) {
    console.error('Authentication middleware error:', error);
    return res.status(500).json({
      error: 'Internal server error',
      message: 'Authentication failed',
      timestamp: new Date().toISOString()
    });
  }
}

export function optionalAuthentication(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) {
  const auth_header = req.headers.authorization;
  
  if (!auth_header || !auth_header.startsWith('Bearer ')) {
    return next();
  }

  // Try to authenticate, but don't fail if it doesn't work
  authenticateUser(req, res, (error) => {
    if (error) {
      // Log error but continue without authentication
      console.warn('Optional authentication failed:', error);
    }
    next();
  });
}

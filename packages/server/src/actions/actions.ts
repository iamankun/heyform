// Generated by An Kun
"use server";
<<<<<<< HEAD
=======
import { neon } from "@neondatabase/serverless";
import { getSecureEnvironmentConfig } from '../utils/env-security';
>>>>>>> 41ef4cd8b77e4d5ab82679d3e2bf6d5847fbc95a

<<<<<<< HEAD
import { sql, sql_unpooled, neonManager } from '../utils/neon-vercel'
=======
// Get secure environment configuration
const { server_vars } = getSecureEnvironmentConfig();
>>>>>>> 41ef4cd8b77e4d5ab82679d3e2bf6d5847fbc95a

<<<<<<< HEAD
export async function testDatabaseConnection() {
  try {
    const connection_status = await neonManager.testConnections()
    const connection_info = await neonManager.getConnectionInfo()
    
    return {
      ...connection_status,
      connection_info
    }
  } catch (error) {
    console.error('Database connection test failed:', error)
    return {
      pooled_status: 'failed',
      unpooled_status: 'failed',
      error: error.message
    }
  }
}
=======
// Validate database URL exists
if (!server_vars.database_url) {
  throw new Error('DATABASE_URL is required but not configured');
}
>>>>>>> 41ef4cd8b77e4d5ab82679d3e2bf6d5847fbc95a

// Use the secure database connection
const sql = neon(server_vars.database_url);
const sql_unpooled = neon(server_vars.database_url_unpooled || server_vars.database_url);

export async function getUserData(user_id: string) {
  const data = await sql`
    SELECT 
      id,
      email,
      first_name,
      last_name,
      avatar_url,
      is_email_verified,
      created_at,
      updated_at
    FROM users 
    WHERE id = ${user_id} AND deleted_at IS NULL
  `;
  return data;
}

export async function getWorkspacesByUser(user_id: string) {
  const data = await sql`
    SELECT 
      w.id,
      w.name,
      w.slug,
      w.logo_url,
      w.settings,
      w.created_at,
      wm.role
    FROM workspaces w
    JOIN workspace_members wm ON w.id = wm.workspace_id
    WHERE wm.user_id = ${user_id} AND w.deleted_at IS NULL
    ORDER BY w.created_at DESC
  `;
  return data;
}

export async function getProjectsByWorkspace(workspace_id: string) {
  const data = await sql`
    SELECT 
      p.id,
      p.name,
      p.created_at,
      p.updated_at,
      u.first_name,
      u.last_name,
      COUNT(f.id) as form_count
    FROM projects p
    LEFT JOIN users u ON p.created_by = u.id
    LEFT JOIN forms f ON p.id = f.project_id AND f.deleted_at IS NULL
    WHERE p.workspace_id = ${workspace_id} AND p.deleted_at IS NULL
    GROUP BY p.id, p.name, p.created_at, p.updated_at, u.first_name, u.last_name
    ORDER BY p.created_at DESC
  `;
  return data;
}

export async function getFormsByProject(project_id: string) {
  const data = await sql`
    SELECT 
      f.id,
      f.title,
      f.description,
      f.status,
      f.created_at,
      f.updated_at,
      u.first_name,
      u.last_name,
      COUNT(s.id) as submission_count
    FROM forms f
    LEFT JOIN users u ON f.created_by = u.id
    LEFT JOIN submissions s ON f.id = s.form_id
    WHERE f.project_id = ${project_id} AND f.deleted_at IS NULL
    GROUP BY f.id, f.title, f.description, f.status, f.created_at, f.updated_at, u.first_name, u.last_name
    ORDER BY f.updated_at DESC
  `;
  return data;
}

export async function getFormSubmissions(form_id: string, limit: number = 50, offset: number = 0) {
  // Use unpooled connection for heavy read operations
  const data = await sql_unpooled`
    SELECT 
      id,
      submission_data,
      user_agent,
      ip_address,
      created_at
    FROM submissions
    WHERE form_id = ${form_id}
    ORDER BY created_at DESC
    LIMIT ${limit} OFFSET ${offset}
  `;
  return data;
}

export async function createWorkspace(name: string, slug: string, owner_id: string, logo_url?: string) {
  const workspace_data = await sql`
    INSERT INTO workspaces (name, slug, owner_id, logo_url)
    VALUES (${name}, ${slug}, ${owner_id}, ${logo_url})
    RETURNING id, name, slug, logo_url, created_at
  `;
  
  // Add owner as workspace member
  await sql`
    INSERT INTO workspace_members (workspace_id, user_id, role, joined_at)
    VALUES (${workspace_data[0].id}, ${owner_id}, 'owner', NOW())
  `;
  
  return workspace_data[0];
}

export async function createProject(name: string, workspace_id: string, created_by: string) {
  const data = await sql`
    INSERT INTO projects (name, workspace_id, created_by)
    VALUES (${name}, ${workspace_id}, ${created_by})
    RETURNING id, name, workspace_id, created_at
  `;
  return data[0];
}

export async function createForm(
  title: string, 
  project_id: string, 
  created_by: string, 
  description?: string,
  form_schema?: any,
  settings?: any
) {
  const data = await sql`
    INSERT INTO forms (title, description, project_id, form_schema, settings, created_by)
    VALUES (${title}, ${description}, ${project_id}, ${JSON.stringify(form_schema)}, ${JSON.stringify(settings)}, ${created_by})
    RETURNING id, title, description, status, created_at
  `;
  return data[0];
}

export async function submitFormData(form_id: string, submission_data: any, user_agent?: string, ip_address?: string) {
  const data = await sql`
    INSERT INTO submissions (form_id, submission_data, user_agent, ip_address)
    VALUES (${form_id}, ${JSON.stringify(submission_data)}, ${user_agent}, ${ip_address})
    RETURNING id, created_at
  `;
  return data[0];
}

export async function updateFormStatus(form_id: string, status: string) {
  const data = await sql`
    UPDATE forms 
    SET status = ${status}, updated_at = NOW()
    WHERE id = ${form_id} AND deleted_at IS NULL
    RETURNING id, title, status, updated_at
  `;
  return data[0];
}

export async function deleteForm(form_id: string) {
  const data = await sql`
    UPDATE forms 
    SET deleted_at = NOW()
    WHERE id = ${form_id}
    RETURNING id
  `;
  return data[0];
}

// Use unpooled connection for heavy analytics queries
export async function getFormAnalytics(form_id: string) {
  const data = await sql_unpooled`
    SELECT 
      COUNT(*) as total_submissions,
      COUNT(DISTINCT ip_address) as unique_visitors,
      DATE(created_at) as submission_date,
      COUNT(*) as daily_count
    FROM submissions
    WHERE form_id = ${form_id}
    GROUP BY DATE(created_at)
    ORDER BY submission_date DESC
    LIMIT 30
  `;
  return data;
}

export async function testDatabaseConnection(): Promise<boolean> {
  try {
    const result = await sql`SELECT 1 as test, current_database() as db_name, current_user as user_name`;
    console.log('üîó Database connection test successful:', {
      database_name: result[0]?.db_name,
      user_name: result[0]?.user_name
    });
    return true;
  } catch (error) {
    console.error('‚ùå Database connection test failed:', error);
    return false;
  }
}

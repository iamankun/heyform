// Generated by An Kun
import { getDatabase } from '../config/database'
import fs from 'fs'
import path from 'path'

async function runMigrations() {
  const db = getDatabase()
  const migrationsDir = path.join(__dirname, '../migrations')
  
  try {
    // Create migrations table if it doesn't exist
    await db.getPool().query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        migration_name VARCHAR(255) NOT NULL,
        executed_at TIMESTAMP DEFAULT NOW()
      )
    `)

    // Get executed migrations
    const executedMigrations = await db.getPool().query(
      'SELECT migration_name FROM migrations ORDER BY id'
    )
    
    const executed = executedMigrations.rows.map(row => row.migration_name)

    // Read migration files
    const migrationFiles = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort()

    for (const file of migrationFiles) {
      if (!executed.includes(file)) {
        console.log(`Running migration: ${file}`)
        
        const migrationSQL = fs.readFileSync(
          path.join(migrationsDir, file), 
          'utf8'
        )
        
        await db.getPool().query(migrationSQL)
        await db.getPool().query(
          'INSERT INTO migrations (migration_name) VALUES ($1)',
          [file]
        )
        
        console.log(`Migration ${file} completed`)
      }
    }

    console.log('All migrations completed successfully')
  } catch (error) {
    console.error('Migration failed:', error)
    process.exit(1)
  } finally {
    await db.closeConnection()
  }
}

runMigrations()

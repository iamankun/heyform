// Generated by An Kun

import { neon } from "@neondatabase/serverless";
import { stack_server_app } from "../lib/stack-server";
import { revalidatePath } from "next/cache";

const handleAddTodo = async (form_data: FormData) => {
  "use server";
  const new_todo = form_data.get("newTodo");
  const user = await stack_server_app.getUser();

  if (!new_todo) {
    throw new Error("No newTodo provided");
  }

  if (!user) {
    throw new Error("User not authenticated");
  }

  const sql = neon(process.env.DATABASE_URL!);
  
  // Ensure user exists in users_sync table
  await sql`
    INSERT INTO neon_auth.users_sync (id, email, display_name, is_email_verified)
    VALUES (${user.id}, ${user.primaryEmail}, ${user.displayName}, ${user.primaryEmailVerified})
    ON CONFLICT (id) DO UPDATE SET
      email = EXCLUDED.email,
      display_name = EXCLUDED.display_name,
      is_email_verified = EXCLUDED.is_email_verified,
      updated_at = NOW()
  `;
  
  // Insert the todo
  await sql`
    INSERT INTO todos (task, is_complete, owner_id) 
    VALUES (${new_todo.toString()}, false, ${user.id})
  `;

  revalidatePath("/todos");
};

export async function AddTodoForm() {
  return (
    <div className="bg-white p-4 border border-gray-200 rounded-lg">
      <h3 className="text-lg font-medium text-gray-900 mb-4">Add New Task</h3>
      
      <form action={handleAddTodo} className="space-y-4">
        <div>
          <label htmlFor="newTodo" className="block text-sm font-medium text-gray-700 mb-1">
            Task
          </label>
          <input 
            id="newTodo"
            required 
            name="newTodo" 
            type="text"
            placeholder="Enter a new todo"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <button 
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
        >
          Add Todo
        </button>
      </form>
    </div>
  );
}
            disabled={loading}
          />
        </div>

        <div>
          <label htmlFor="todo-description" className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="todo-description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Enter TODO description (optional)..."
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            disabled={loading}
          />
        </div>

        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        <button
          type="submit"
          disabled={loading || !title.trim()}
          className={`w-full py-2 px-4 rounded-md font-medium transition-colors ${
            loading || !title.trim()
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'
          }`}
        >
          {loading ? 'Creating...' : 'Add TODO'}
        </button>
      </form>
    </div>
  );
}

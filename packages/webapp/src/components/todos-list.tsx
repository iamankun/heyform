// Generated by An Kun

import React, { useState, useEffect } from 'react';
import { getCurrentUser } from '../lib/stack-auth-client';
import { getTodosList, updateTodoStatus } from '../../server/src/actions/neon-auth-actions';
import { neon } from "@neondatabase/serverless";

interface Todo {
  id: string;
  title: string;
  description?: string;
  completed: boolean;
  created_at: string;
  updated_at: string;
  owner_name?: string;
  owner_email?: string;
}

interface TodosListProps {
  className?: string;
}

interface TodoWithOwner {
  id: string;
  task: string;
  is_complete: boolean;
  owner?: {
    id: string;
    email: string;
  };
}

export function TodosList({ className = '' }: TodosListProps) {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [loading, setLoading] = useState(true);
  const [user_info, setUserInfo] = useState<{
    display_name?: string;
    email?: string;
  } | null>(null);

  useEffect(() => {
    loadTodos();
  }, []);

  const loadTodos = async () => {
    try {
      setLoading(true);
      const current_user = await getCurrentUser();
      
      if (!current_user) {
        console.error('User not authenticated');
        return;
      }

      const sql = neon(process.env.DATABASE_URL!);

      // get the todos with the owner
      const todos_with_owner = await sql(`
        SELECT 
          todos.id,
          todos.task,
          todos.is_complete,
          users.id as "owner.id",
          users.email as "owner.email"
        FROM todos
        LEFT JOIN neon_auth.users_sync users ON todos.owner_id = users.id
        ORDER BY todos.inserted_at ASC;
      `) as TodoWithOwner[];
      
      setTodos(todos_with_owner);
    } catch (error) {
      console.error('Error loading todos:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleToggleComplete = async (todo_id: string, completed: boolean) => {
    try {
      const current_user = await getCurrentUser();
      if (!current_user) return;

      const result = await updateTodoStatus(
        current_user.access_token,
        todo_id,
        completed
      );

      if (result.success) {
        setTodos(prev => prev.map(todo => 
          todo.id === todo_id 
            ? { ...todo, completed, updated_at: result.todo.updated_at }
            : todo
        ));
      } else {
        console.error('Failed to update todo:', result.error);
      }
    } catch (error) {
      console.error('Error updating todo:', error);
    }
  };

  if (loading) {
    return (
      <div className={`p-4 ${className}`}>
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            <div className="h-3 bg-gray-200 rounded"></div>
            <div className="h-3 bg-gray-200 rounded w-5/6"></div>
            <div className="h-3 bg-gray-200 rounded w-4/6"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`p-4 ${className}`}>
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Your TODOs</h2>
        {user_info && (
          <p className="text-gray-600">
            Welcome back, {user_info.display_name || user_info.email}!
          </p>
        )}
      </div>

      {todos.length === 0 ? (
        <div className="text-center py-8">
          <div className="text-gray-400 text-lg mb-2">No TODOs yet</div>
          <p className="text-gray-500">Create your first TODO to get started!</p>
        </div>
      ) : (
        <div className="space-y-3">
          {todos.map((todo) => (
            <div
              key={todo.id}
              className={`p-4 border rounded-lg transition-colors ${
                todo.completed
                  ? 'bg-gray-50 border-gray-200'
                  : 'bg-white border-gray-300 hover:border-gray-400'
              }`}
            >
              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  checked={todo.completed}
                  onChange={(e) => handleToggleComplete(todo.id, e.target.checked)}
                  className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                
                <div className="flex-1 min-w-0">
                  <h3
                    className={`text-lg font-medium ${
                      todo.completed
                        ? 'text-gray-500 line-through'
                        : 'text-gray-900'
                    }`}
                  >
                    {todo.title}
                  </h3>
                  
                  {todo.description && (
                    <p
                      className={`mt-1 text-sm ${
                        todo.completed ? 'text-gray-400' : 'text-gray-600'
                      }`}
                    >
                      {todo.description}
                    </p>
                  )}
                  
                  <div className="mt-2 text-xs text-gray-400">
                    Created: {new Date(todo.created_at).toLocaleDateString()}
                    {todo.updated_at !== todo.created_at && (
                      <span className="ml-2">
                        Updated: {new Date(todo.updated_at).toLocaleDateString()}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// Generated by An Kun

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function fixCIIssues() {
  console.log('üîß Fixing CI/CD issues...');
  
  try {
    // Clear all lock files
    console.log('üßπ Cleaning lock files...');
    const lock_files = ['pnpm-lock.yaml', 'package-lock.json', 'yarn.lock'];
    
    lock_files.forEach(file => {
      if (fs.existsSync(file)) {
        console.log(`  Removing ${file}...`);
        fs.unlinkSync(file);
      }
    });

    // Clear node_modules
    console.log('üóëÔ∏è Cleaning node_modules...');
    const node_modules_dirs = [
      'node_modules',
      'packages/webapp/node_modules',
      'packages/server/node_modules',
      'packages/utils/node_modules',
      'packages/shared-types-enums/node_modules',
      'packages/answer-utils/node_modules'
    ];
    
    node_modules_dirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        console.log(`  Removing ${dir}...`);
        fs.rmSync(dir, { recursive: true, force: true });
      }
    });

    // Clear pnpm cache
    console.log('üíæ Clearing pnpm cache...');
    try {
      execSync('pnpm store prune', { stdio: 'inherit' });
    } catch (error) {
      console.log('Cache clear failed, continuing...');
    }

    // Fresh install
    console.log('üì¶ Fresh install...');
    execSync('pnpm install --no-frozen-lockfile --ignore-engines', { 
      stdio: 'inherit',
      env: { 
        ...process.env,
        NODE_OPTIONS: '--max_old_space_size=4096'
      }
    });

    console.log('‚úÖ CI issues fixed successfully!');
  } catch (error) {
    console.error('‚ùå Failed to fix CI issues:', error.message);
    process.exit(1);
  }
}

fixCIIssues();
